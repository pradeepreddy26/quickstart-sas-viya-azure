{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "0.1.0.0",
    "parameters": {
        "DeploymentDataLocation": {
            "type": "String",
            "metadata": {
                "description": "Blob Shared Access Signature(SAS) URL to the SAS license."
            }
        },
        "SSHPublicKey": {
            "type": "String",
            "metadata": {
                "description": "The full ssh public key that will be added to the servers."
            }
        },
        "location": {
            "defaultValue": "[resourceGroup().location]",
            "type": "String",
            "metadata": {
                "description": "The location in Microsoft Azure where these resources should be created."
            }
        },
        "WebIngressLocation": {
            "type": "String",
            "metadata": {
                "description": "Allow inbound HTTP traffic to the SAS Viya Environment from this CIDR block (IP address range). Must be a valid IP CIDR range of the form x.x.x.x/x."
            }
        },
        "AdminIngressLocation": {
            "type": "String",
            "metadata": {
                "description": "Allow inbound SSH traffic to the Ansible Controller from this CIDR block (IP address range). Must be a valid IP CIDR range of the form x.x.x.x/x."
            }
        },
        "SASAdminPass": {
            "minLength": 6,
            "maxLength": 255,
            "type": "SecureString",
            "metadata": {
                "description": "Password of the SAS Admin Users (sasboot, optionally sasadmin). Must have at least 6 and no more than 255 characters. Single quotes (') are not allowed."
            }
        },
        "SASUserPass": {
            "defaultValue": "",
            "type": "SecureString",
            "metadata": {
                "description": "Password of the default SAS User (sasuser). If left empty, no default users are created. (WARNING: If not set, deployment will require additional setup steps before it is usable). Single quotes (') are not allowed."
            }
        },
        "DeploymentMirror": {
            "defaultValue": "",
            "type": "String",
            "metadata": {
                "description": "OPTIONAL: Specifies the https location of a SAS mirror. Mirror should be a path to a mirror directory tree in blob storage."
            }
        },
        "Ansible VM SKU": {
            "defaultValue": "Standard_B2s",
            "type": "String",
            "metadata": {
                "description": "This is the SKU for the Ansible/Bastion VM."
            }
        },
        "Services VM SKU": {
            "defaultValue": "Standard_E8s_v3",
            "type": "String",
            "metadata": {
                "description": "This is the SKU for the Services VM. The default SKU value represents the minimum recommended size for system stability in most SAS software license sets. The selected SKU must support premium disks."
            }
        },
        "spre VM SKU": {
            "defaultValue": "Standard_E8s_v3",
            "type": "String",
            "metadata": {
                "description": "This is the SKU for the SPRE VM. The default SKU value represents the minimum recommended size for system stability in most SAS software license sets. The selected SKU must support premium disks."
            }
        },
        "numSasWorkDisks": {
            "defaultValue": 2,
            "minValue": 2,
            "maxValue": 8,
            "type": "Int",
            "metadata": {
                "description": "This parameter allows the user to select the number of SAS Work disks they want"
            }
        },
        "sizeOfSasWorkDisksInGB": {
            "defaultValue": 256,
            "minValue": 16,
            "maxValue": 1024,
            "type": "Int",
            "metadata": {
                "description": "Size of the SAS WWork disks"
            }
        },
        "Controller VM SKU": {
            "defaultValue": "Standard_E8s_v3",
            "type": "String",
            "metadata": {
                "description": "This is the SKU for the Controller VM. The default SKU value represents the minimum recommended size for system stability in most SAS software license sets. The selected SKU must support premium disks."
            }
        },
        "numCasCacheDisks": {
            "defaultValue": 2,
            "minValue": 2,
            "maxValue": 8,
            "type": "Int",
            "metadata": {
                "description": "This parameter allows the user to select the number of CAS cache disks they want"
            }
        },
        "sizeOfCasCacheDisksInGB": {
            "defaultValue": 256,
            "minValue": 16,
            "maxValue": 1024,
            "type": "Int",
            "metadata": {
                "description": "Size of the CAS cache disks"
            }
        },
        "CAS Node Count": {
            "defaultValue": 1,
            "minValue": 1,
            "maxValue": 10,
            "type": "Int",
            "metadata": {
                "description": "The number of CAS nodes in the deployment. If this is set to 1, an SMP environment is built with one CAS controller. If this is set to a value of 2 or more, an MPP environment is built (n workers + 1 controller). In the MPP environment case, you should shrink the size of the CAS controller as it will only be performing orchestration."
            }
        },
        "CAS Worker VM SKU": {
            "defaultValue": "Standard_E8s_v3",
            "type": "String",
            "metadata": {
                "description": "This is the SKU for the CAS worker VM. The default SKU value represents the minimum recommended size for system stability in most SAS software license sets. The selected SKU must support premium disks."
            }
        },
        "_artifactsLocationSasToken": {
            "defaultValue": "",
            "type": "SecureString",
            "metadata": {
                "description": "For a standard deployment, leave empty. If you are running from a blob template, then provide the Shared Access Signature token (starting with a ?) that grants authorization to the private template. "
            }
        },
        "_artifactsLocation": {
            "defaultValue": "https://raw.githubusercontent.com/satishpandey123/quickstart-sas-viya-azure/master/sas-viya/",
            "type": "String",
            "metadata": {
                "description": "For a standard deployment, keep the default.  The https URL to the base of the deployment files in Microsoft Azure. If a SAS key is needed, please do not include the SAS key in the URL. Instead, add the part after and include the question mark to the _artifactsLocationSasToken variable. ex. https://(STORAGE_ACCOUNT).file.core.windows.net/(SHARE_NAME)/(SUBDIRECTORY_NAME)/"
            }
        }
    },
    "variables": {
        "resourceGroupUniqueString": "[uniqueString(resourceGroup().id)]",
        "VirtualNetworkName": "[concat('viyanetwork_',variables('resourceGroupUniqueString'))]",
        "VirtualNetworkPrivateSubnet": "[concat(variables('VirtualNetworkName'), '_private')]",
        "VirtualNetworkPrivateSubnetCIDR": "10.0.127.0/24",
        "VirtualNetworkPublicSubnet": "[concat(variables('VirtualNetworkName'), '_public')]",
        "VirtualNetworkPublicSubnetCIDR": "10.0.128.0/24",
        "VirtualNetworkApplicationGatewaySubnet": "[concat(variables('VirtualNetworkName'), '_applicationGateway')]",
        "VirtualNetworkApplicationGatewaySubnetCIDR": "10.0.129.0/24",
        "DiagnosticStorageGroupName": "[toLower(concat('rg4diag', variables('resourceGroupUniqueString')))]",
        "AzureFilesViyaShare": "viyashare",
        "PrimaryUserName": "vmuser",
        "ExtensionAnsibleURI": "[concat(parameters('_artifactsLocation'), 'nestedtemplates/run_ansible_script.json', parameters('_artifactsLocationSasToken'))]",
        "NetworkCreateTemplateURI": "[concat(parameters('_artifactsLocation'), 'nestedtemplates/createNetworkSubtemplate.json', parameters('_artifactsLocationSasToken'))]",
        "AlternateDomain": "[concat('viya-', subscription().subscriptionId, '-', variables('resourceGroupUniqueString'))]",
        "DomainActual": "[ substring(variables('AlternateDomain'),0,if(lessOrEquals(length(variables('AlternateDomain')),60), length(variables('AlternateDomain')), 60))]",
        "Base64AdminPass": "[base64(parameters('SASAdminPass'))]",
        "Base64UserPass": "[base64(parameters('SASUserPass'))]"
    },
    "resources": [
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "apiVersion": "2019-09-01",
            "name": "PrimaryViyaLoadbalancer_PublicIP",
            "location": "[parameters('location')]",
            "sku": {
                "name": "Basic",
                "tier": "Regional"
            },
            "properties": {
                "publicIPAddressVersion": "IPv4",
                "publicIPAllocationMethod": "Dynamic",
                "idleTimeoutInMinutes": 4,
                "dnsSettings": {
                    "domainNameLabel": "[variables('DomainActual')]"
                }
            }
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2019-09-01",
            "name": "PrimaryViyaLoadbalancer_NetworkSecurityGroup",
            "location": "[parameters('location')]",
            "properties": {
                "securityRules": [
                    {
                        "name": "allow-https",
                        "properties": {
                            "protocol": "TCP",
                            "sourcePortRange": "*",
                            "destinationPortRange": "443",
                            "sourceAddressPrefix": "[parameters('WebIngressLocation')]",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1000,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "allow-backend-health",
                        "properties": {
                            "protocol": "TCP",
                            "sourcePortRange": "*",
                            "destinationPortRange": "65503-65534",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1001,
                            "direction": "Inbound"
                        }
                    }
                ],
                "defaultSecurityRules": [
                    {
                        "name": "AllowVnetInBound",
                        "properties": {
                            "description": "Allow inbound traffic from all VMs in VNET",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "VirtualNetwork",
                            "destinationAddressPrefix": "VirtualNetwork",
                            "access": "Allow",
                            "priority": 65000,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "AllowAzureLoadBalancerInBound",
                        "properties": {
                            "description": "Allow inbound traffic from the Microsoft Azure load balancer",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "AzureLoadBalancer",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 65001,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "DenyAllInBound",
                        "properties": {
                            "description": "Deny all inbound traffic",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Deny",
                            "priority": 65500,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "AllowVnetOutBound",
                        "properties": {
                            "description": "Allow outbound traffic from all VMs to all VMs in VNET",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "VirtualNetwork",
                            "destinationAddressPrefix": "VirtualNetwork",
                            "access": "Allow",
                            "priority": 65000,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "AllowInternetOutBound",
                        "properties": {
                            "description": "Allow outbound traffic from all VMs to the Internet",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "Internet",
                            "access": "Allow",
                            "priority": 65001,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "DenyAllOutBound",
                        "properties": {
                            "description": "Deny all outbound traffic",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Deny",
                            "priority": 65500,
                            "direction": "Outbound"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "CreateNetwork",
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', 'PrimaryViyaLoadbalancer_NetworkSecurityGroup')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('NetworkCreateTemplateURI')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "virtualNetworkName": {
                        "value": "[variables('VirtualNetworkName')]"
                    },
                    "addressPrefix": {
                        "value": "10.0.0.0/16"
                    },
                    "VirtualNetworkPrivateSubnet": {
                        "value": "[variables('VirtualNetworkPrivateSubnet')]"
                    },
                    "VirtualNetworkPublicSubnet": {
                        "value": "[variables('VirtualNetworkPublicSubnet')]"
                    },
                    "VirtualNetworkApplicationGatewaySubnet": {
                        "value": "[variables('VirtualNetworkApplicationGatewaySubnet')]"
                    },
                    "VirtualNetworkPrivateSubnetCIDR": {
                        "value": "[variables('VirtualNetworkPrivateSubnetCIDR')]"
                    },
                    "VirtualNetworkPublicSubnetCIDR": {
                        "value": "[variables('VirtualNetworkPublicSubnetCIDR')]"
                    },
                    "VirtualNetworkApplicationGatewaySubnetCIDR": {
                        "value": "[variables('VirtualNetworkApplicationGatewaySubnetCIDR')]"
                    },
                    "LoadBalancerNetworkSecurityGroup": {
                        "value": "PrimaryViyaLoadbalancer_NetworkSecurityGroup"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Network/applicationGateways",
            "apiVersion": "2019-09-01",
            "name": "PrimaryViyaLoadbalancer",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses', 'PrimaryViyaLoadbalancer_PublicIP')]",
                "[resourceId('Microsoft.Network/networkInterfaces', 'Services_NetworkInterface')]",
                "[resourceId('Microsoft.Compute/virtualMachines', 'services')]",
                "[resourceId('Microsoft.Resources/deployments', 'CreateNetwork')]"
            ],
            "properties": {
                "sku": {
                    "name": "Standard_Small",
                    "tier": "Standard",
                    "capacity": 1
                },
                "sslPolicy": {
                    "policyType": "Custom",
                    "cipherSuites": [
                        "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256",
                        "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256",
                        "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384",
                        "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384"
                    ],
                    "minProtocolVersion": "TLSv1_2"
                },
                "gatewayIPConfigurations": [
                    {
                        "name": "appGatewayIpConfig",
                        "properties": {
                            "subnet": {
                                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('VirtualNetworkName'), variables('VirtualNetworkApplicationGatewaySubnet'))]"
                            }
                        }
                    }
                ],
                "sslCertificates": [
                    {
                        "name": "appGatewayFrontendCertificate",
                        "properties": {
                            "data": "[json(concat(split(reference('AnsiblePhase2GetLBCertPart1').outputs.instanceView.value.statuses[0].message, '#DATA#')[1],split(reference('AnsiblePhase3GetLBCertPart2').outputs.instanceView.value.statuses[0].message, '#DATA#')[1])).data]",
                            "password": "[json(concat(split(reference('AnsiblePhase2GetLBCertPart1').outputs.instanceView.value.statuses[0].message, '#DATA#')[1],split(reference('AnsiblePhase3GetLBCertPart2').outputs.instanceView.value.statuses[0].message, '#DATA#')[1])).password]"
                        }
                    }
                ],
                "authenticationCertificates": [
                    {
                        "name": "viya-ca.cer",
                        "properties": {
                            "data": "[split(reference('AnsiblePhase5GetCACert').outputs.instanceView.value.statuses[0].message, '#DATA#')[1]]"
                        }
                    }
                ],
                "frontendIPConfigurations": [
                    {
                        "name": "appGatewayFrontendIP",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', 'PrimaryViyaLoadbalancer_PublicIP')]"
                            }
                        }
                    }
                ],
                "frontendPorts": [
                    {
                        "name": "appGatewayFrontendPort",
                        "properties": {
                            "port": 443
                        }
                    }
                ],
                "backendAddressPools": [
                    {
                        "name": "appGatewayBackendPool",
                        "properties": {
                            "backendAddresses": [
                                {
                                    "IpAddress": "[reference(resourceId('Microsoft.Network/networkInterfaces', 'Services_NetworkInterface')).ipConfigurations[0].properties.privateIPAddress]"
                                }
                            ]
                        }
                    }
                ],
                "backendHttpSettingsCollection": [
                    {
                        "name": "appGatewayBackendHttpSettings",
                        "properties": {
                            "port": 443,
                            "protocol": "Https",
                            "cookieBasedAffinity": "Disabled",
                            "pickHostNameFromBackendAddress": false,
                            "requestTimeout": 30000,
                            "authenticationCertificates": [
                                {
                                    "id": "[resourceId('Microsoft.Network/applicationGateways/authenticationCertificates', 'PrimaryViyaLoadbalancer', 'viya-ca.cer')]"
                                }
                            ]
                        }
                    }
                ],
                "httpListeners": [
                    {
                        "name": "appGatewayHttpListener",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[resourceId('Microsoft.Network/applicationGateways/frontendIPConfigurations', 'PrimaryViyaLoadbalancer', 'appGatewayFrontendIP')]"
                            },
                            "frontendPort": {
                                "id": "[resourceId('Microsoft.Network/applicationGateways/frontendPorts', 'PrimaryViyaLoadbalancer', 'appGatewayFrontendPort')]"
                            },
                            "protocol": "Https",
                            "sslCertificate": {
                                "id": "[resourceId('Microsoft.Network/applicationGateways/sslCertificates', 'PrimaryViyaLoadbalancer', 'appGatewayFrontendCertificate')]"
                            },
                            "requireServerNameIndication": false
                        }
                    }
                ],
                "requestRoutingRules": [
                    {
                        "name": "rule1",
                        "properties": {
                            "ruleType": "Basic",
                            "httpListener": {
                                "id": "[resourceId('Microsoft.Network/applicationGateways/httpListeners', 'PrimaryViyaLoadbalancer', 'appGatewayHttpListener')]"
                            },
                            "backendAddressPool": {
                                "id": "[resourceId('Microsoft.Network/applicationGateways/backendAddressPools', 'PrimaryViyaLoadbalancer', 'appGatewayBackendPool')]"
                            },
                            "backendHttpSettings": {
                                "id": "[resourceId('Microsoft.Network/applicationGateways/backendHttpSettingsCollection', 'PrimaryViyaLoadbalancer', 'appGatewayBackendHttpSettings')]"
                            }
                        }
                    }
                ],
                "enableHttp2": true
            }
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2019-09-01",
            "name": "AnsibleController_NetworkSecurityGroup",
            "location": "[parameters('location')]",
            "properties": {
                "securityRules": [
                    {
                        "name": "allow-ssh",
                        "properties": {
                            "protocol": "TCP",
                            "sourcePortRange": "*",
                            "destinationPortRange": "22",
                            "sourceAddressPrefix": "[parameters('AdminIngressLocation')]",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1000,
                            "direction": "Inbound"
                        }
                    }
                ],
                "defaultSecurityRules": [
                    {
                        "name": "AllowVnetInBound",
                        "properties": {
                            "description": "Allow inbound traffic from all VMs in VNET",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "VirtualNetwork",
                            "destinationAddressPrefix": "VirtualNetwork",
                            "access": "Allow",
                            "priority": 65000,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "AllowAzureLoadBalancerInBound",
                        "properties": {
                            "description": "Allow inbound traffic from the Microsoft Azure load balancer",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "AzureLoadBalancer",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 65001,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "DenyAllInBound",
                        "properties": {
                            "description": "Deny all inbound traffic",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Deny",
                            "priority": 65500,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "AllowVnetOutBound",
                        "properties": {
                            "description": "Allow outbound traffic from all VMs to all VMs in VNET",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "VirtualNetwork",
                            "destinationAddressPrefix": "VirtualNetwork",
                            "access": "Allow",
                            "priority": 65000,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "AllowInternetOutBound",
                        "properties": {
                            "description": "Allow outbound traffic from all VMs to Internet",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "Internet",
                            "access": "Allow",
                            "priority": 65001,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "DenyAllOutBound",
                        "properties": {
                            "description": "Deny all outbound traffic",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Deny",
                            "priority": 65500,
                            "direction": "Outbound"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "apiVersion": "2019-09-01",
            "name": "AnsibleController_PublicIP",
            "location": "[parameters('location')]",
            "sku": {
                "name": "Basic",
                "tier": "Regional"
            },
            "properties": {
                "publicIPAddressVersion": "IPv4",
                "publicIPAllocationMethod": "Static",
                "idleTimeoutInMinutes": 4
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "apiVersion": "2019-09-01",
            "name": "AnsibleController_NetworkInterface",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses', 'AnsibleController_PublicIP')]",
                "[resourceId('Microsoft.Network/networkSecurityGroups', 'AnsibleController_NetworkSecurityGroup')]",
                "[resourceId('Microsoft.Network/applicationSecurityGroups', 'github-accessor')]",
                "[resourceId('Microsoft.Resources/deployments', 'CreateNetwork')]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', 'AnsibleController_PublicIP')]"
                            },
                            "subnet": {
                                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('VirtualNetworkName'), variables('VirtualNetworkPublicSubnet'))]"
                            },
                            "privateIPAddressVersion": "IPv4",
                            "applicationSecurityGroups": [
                                {
                                    "id": "[resourceId('Microsoft.Network/applicationSecurityGroups', 'github-accessor')]"
                                }
                            ]
                        }
                    }
                ],
                "enableAcceleratedNetworking": false,
                "enableIPForwarding": false,
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', 'AnsibleController_NetworkSecurityGroup')]"
                }
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "apiVersion": "2019-07-01",
            "name": "Ansible",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', 'AnsibleController_NetworkInterface')]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('DiagnosticStorageGroupName'))]"
            ],
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[parameters('Ansible VM SKU')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "RedHat",
                        "offer": "RHEL",
                        "sku": "7.7",
                        "version": "latest"
                    },
                    "osDisk": {
                        "osType": "Linux",
                        "name": "Ansible_OsDisk_1",
                        "createOption": "FromImage",
                        "caching": "ReadWrite",
                        "managedDisk": {
                            "storageAccountType": "Premium_LRS"
                        },
                        "diskSizeGB": 64
                    }
                },
                "osProfile": {
                    "computerName": "Ansible",
                    "adminUsername": "[variables('PrimaryUserName')]",
                    "linuxConfiguration": {
                        "disablePasswordAuthentication": true,
                        "ssh": {
                            "publicKeys": [
                                {
                                    "path": "[concat('/home/', variables('PrimaryUserName'), '/.ssh/authorized_keys')]",
                                    "keyData": "[parameters('SSHPublicKey')]"
                                }
                            ]
                        }
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', 'AnsibleController_NetworkInterface')]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true,
                        "storageUri": "[reference(variables('DiagnosticStorageGroupName')).primaryEndpoints.blob]"
                    }
                }
            },
            "resources": []
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "AnsiblePhase1SetupHostForAnsible",
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', 'Ansible')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('ExtensionAnsibleURI')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "vmName": {
                        "value": "Ansible"
                    },
                    "commandToExecute": {
                        "value": "[concat('mkdir -p /var/log/sas/install && set -o pipefail; ./ansiblecontroller_startup.sh \"1\" \"', parameters('_artifactsLocation'), '\" \"', parameters('_artifactsLocationSasToken'), '\" \"', parameters('DeploymentDataLocation'),  '\" \"', variables('PrimaryUserName'),'\" \"', variables('Base64AdminPass'),'\" \"', variables('Base64UserPass'), '\" \"', variables('VirtualNetworkPrivateSubnetCIDR'), '\" \"', reference(resourceId('Microsoft.Network/publicIPAddresses', 'PrimaryViyaLoadbalancer_PublicIP')).dnsSettings.fqdn, '\" \"', parameters('DeploymentMirror'), '\" \"', variables('DiagnosticStorageGroupName'), '\" \"', variables('AzureFilesViyaShare'), '\" \"', listKeys(variables('DiagnosticStorageGroupName'),'2019-06-01').keys[0].value, '\" \"', parameters('CAS Node Count'), '\" \"\" 2>&1 | tee /var/log/sas/install/runAnsiblePhase1_SetupPrerequisites.log')]"
                    },
                    "_artifactsLocation": {
                        "value": "[parameters('_artifactsLocation')]"
                    },
                    "_artifactsLocationSasToken": {
                        "value": "[parameters('_artifactsLocationSasToken')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "AnsiblePhase2GetLBCertPart1",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'AnsiblePhase1SetupHostForAnsible')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('ExtensionAnsibleURI')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "vmName": {
                        "value": "Ansible"
                    },
                    "commandToExecute": {
                        "value": "[concat('set -o pipefail; ./ansiblecontroller_startup.sh \"3\"  2>&1 | tee /var/log/sas/install/runAnsiblePhase2_CertificateExport_1.log')]"
                    },
                    "_artifactsLocation": {
                        "value": "[parameters('_artifactsLocation')]"
                    },
                    "_artifactsLocationSasToken": {
                        "value": "[parameters('_artifactsLocationSasToken')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "AnsiblePhase3GetLBCertPart2",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'AnsiblePhase2GetLBCertPart1')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('ExtensionAnsibleURI')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "vmName": {
                        "value": "Ansible"
                    },
                    "commandToExecute": {
                        "value": "[concat('set -o pipefail; ./ansiblecontroller_startup.sh \"4\"  2>&1 | tee /var/log/sas/install/runAnsiblePhase3_CertificateExport_2.log')]"
                    },
                    "_artifactsLocation": {
                        "value": "[parameters('_artifactsLocation')]"
                    },
                    "_artifactsLocationSasToken": {
                        "value": "[parameters('_artifactsLocationSasToken')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "AnsiblePhase4PreViyaInstall",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'AnsiblePhase3GetLBCertPart2')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('ExtensionAnsibleURI')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "vmName": {
                        "value": "Ansible"
                    },
                    "commandToExecute": {
                        "value": "[concat('set -o pipefail; ./ansiblecontroller_startup.sh \"5\"  2>&1 | tee /var/log/sas/install/runAnsiblePhase4_PRE_INSTALL.log')]"
                    },
                    "_artifactsLocation": {
                        "value": "[parameters('_artifactsLocation')]"
                    },
                    "_artifactsLocationSasToken": {
                        "value": "[parameters('_artifactsLocationSasToken')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "AnsiblePhase5GetCACert",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'AnsiblePhase4PreViyaInstall')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('ExtensionAnsibleURI')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "vmName": {
                        "value": "Ansible"
                    },
                    "commandToExecute": {
                        "value": "[concat('set -o pipefail; ./ansiblecontroller_startup.sh \"6\"  2>&1 | tee /var/log/sas/install/runAnsiblePhase5_SAS_CA_CRT.log')]"
                    },
                    "_artifactsLocation": {
                        "value": "[parameters('_artifactsLocation')]"
                    },
                    "_artifactsLocationSasToken": {
                        "value": "[parameters('_artifactsLocationSasToken')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "AnsiblePhase6Part1RunViyaInstall",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'AnsiblePhase5GetCACert')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('ExtensionAnsibleURI')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "vmName": {
                        "value": "Ansible"
                    },
                    "commandToExecute": {
                        "value": "[concat('set -o pipefail; ./ansiblecontroller_startup.sh \"7\"  2>&1 | tee /var/log/sas/install/runAnsiblePhase6Part1_SAS_INSTALL.log')]"
                    },
                    "_artifactsLocation": {
                        "value": "[parameters('_artifactsLocation')]"
                    },
                    "_artifactsLocationSasToken": {
                        "value": "[parameters('_artifactsLocationSasToken')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "AnsiblePhase6Part2RunViyaInstall",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'AnsiblePhase6Part1RunViyaInstall')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('ExtensionAnsibleURI')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "vmName": {
                        "value": "Ansible"
                    },
                    "commandToExecute": {
                        "value": "[concat('set -o pipefail; ./ansiblecontroller_startup.sh \"7\"  2>&1 | tee /var/log/sas/install/runAnsiblePhase6Part2_SAS_INSTALL.log')]"
                    },
                    "_artifactsLocation": {
                        "value": "[parameters('_artifactsLocation')]"
                    },
                    "_artifactsLocationSasToken": {
                        "value": "[parameters('_artifactsLocationSasToken')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "AnsiblePhase6Part3RunViyaInstall",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'AnsiblePhase6Part2RunViyaInstall')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('ExtensionAnsibleURI')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "vmName": {
                        "value": "Ansible"
                    },
                    "commandToExecute": {
                        "value": "[concat('set -o pipefail; ./ansiblecontroller_startup.sh \"7\"  2>&1 | tee /var/log/sas/install/runAnsiblePhase6Part3_SAS_INSTALL.log')]"
                    },
                    "_artifactsLocation": {
                        "value": "[parameters('_artifactsLocation')]"
                    },
                    "_artifactsLocationSasToken": {
                        "value": "[parameters('_artifactsLocationSasToken')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "AnsiblePhase7PostViyaInstall",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'AnsiblePhase6Part3RunViyaInstall')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('ExtensionAnsibleURI')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "vmName": {
                        "value": "Ansible"
                    },
                    "commandToExecute": {
                        "value": "[concat('set -o pipefail; ./ansiblecontroller_startup.sh \"8\"  2>&1 | tee /var/log/sas/install/runAnsiblePhase7_POST_INSTALL.log')]"
                    },
                    "_artifactsLocation": {
                        "value": "[parameters('_artifactsLocation')]"
                    },
                    "_artifactsLocationSasToken": {
                        "value": "[parameters('_artifactsLocationSasToken')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "AnsiblePhase8GetCASURIsFromLicense",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'AnsiblePhase7PostViyaInstall')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('ExtensionAnsibleURI')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "vmName": {
                        "value": "Ansible"
                    },
                    "commandToExecute": {
                        "value": "[concat('set -o pipefail; ./ansiblecontroller_startup.sh \"9\"  2>&1 | tee /var/log/sas/install/runAnsiblePhase8_ReturnCasSize.log')]"
                    },
                    "_artifactsLocation": {
                        "value": "[parameters('_artifactsLocation')]"
                    },
                    "_artifactsLocationSasToken": {
                        "value": "[parameters('_artifactsLocationSasToken')]"
                    }
                }
            }
        },
	{
      "name": "content/AnsiblePhase9RMContentInstall",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "location": "[parameters('location')]",
      "apiVersion": "2019-07-01",
      "dependsOn": [
         "[resourceId('Microsoft.Resources/deployments', 'AnsiblePhase7PostViyaInstall')]"
      ],
      "properties": {
        "publisher": "Microsoft.Azure.Extensions",
        "type": "CustomScript",
        "typeHandlerVersion": "2.0",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "skipDos2Unix": false
        },
        "protectedSettings": {
          "commandToExecute": "[ concat('set -o pipefail; ./rmcontentinstall.sh \"', variables('PrimaryUserName'),'\" \"', variables('Base64AdminPass'), '\" \"', reference(resourceId('Microsoft.Network/publicIPAddresses', 'PrimaryViyaLoadbalancer_PublicIP')).dnsSettings.fqdn, '\" \"\" 2>&1 | tee /tmp/prerequisites.log')]",
          "fileUris": [
            "[concat(parameters('_artifactsLocation'), 'scripts/rmcontentinstall.sh', parameters('_artifactsLocationSasToken'))]"
          ]
        }
      }
    },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "apiVersion": "2019-09-01",
            "name": "CASController_NetworkInterface",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', 'Viya_NetworkSecurityGroup')]",
                "[resourceId('Microsoft.Network/applicationSecurityGroups', 'github-accessor')]",
                "[resourceId('Microsoft.Network/applicationSecurityGroups', 'sas-services-accessor')]",
                "[resourceId('Microsoft.Network/applicationSecurityGroups', 'sas-viya-provider')]",
                "[resourceId('Microsoft.Resources/deployments', 'CreateNetwork')]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "subnet": {
                                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('VirtualNetworkName'), variables('VirtualNetworkPrivateSubnet'))]"
                            },
                            "privateIPAddressVersion": "IPv4",
                            "applicationSecurityGroups": [
                                {
                                    "id": "[resourceId('Microsoft.Network/applicationSecurityGroups', 'github-accessor')]"
                                },
                                {
                                    "id": "[resourceId('Microsoft.Network/applicationSecurityGroups', 'sas-services-accessor')]"
                                },
                                {
                                    "id": "[resourceId('Microsoft.Network/applicationSecurityGroups', 'sas-viya-provider')]"
                                }
                            ]
                        }
                    }
                ],
                "enableAcceleratedNetworking": false,
                "enableIPForwarding": false,
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', 'Viya_NetworkSecurityGroup')]"
                }
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2019-04-01",
            "name": "[variables('DiagnosticStorageGroupName')]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
            },
            "kind": "StorageV2",
            "properties": {
                "networkAcls": {
                    "bypass": "AzureServices",
                    "defaultAction": "Allow"
                },
                "supportsHttpsTrafficOnly": false,
                "encryption": {
                    "services": {
                        "file": {
                            "enabled": true
                        },
                        "blob": {
                            "enabled": true
                        }
                    },
                    "keySource": "Microsoft.Storage"
                }
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "apiVersion": "2019-07-01",
            "name": "controller",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', 'CASController_NetworkInterface')]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('DiagnosticStorageGroupName'))]"
            ],
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[parameters('Controller VM SKU')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "RedHat",
                        "offer": "RHEL",
                        "sku": "7.7",
                        "version": "latest"
                    },
                    "osDisk": {
                        "osType": "Linux",
                        "name": "controller_OsDisk_1",
                        "createOption": "FromImage",
                        "caching": "ReadWrite",
                        "managedDisk": {
                            "storageAccountType": "Premium_LRS"
                        },
                        "diskSizeGB": 64
                    },
                    "copy": [
                        {
                            "name": "dataDisks",
                            "count": "[if(equals(parameters('CAS Node Count'),1),add(parameters('numCasCacheDisks'),1),1)]",
                            "input": {
                                "caching": "none",
                                "diskSizeGB": "[if(equals(copyIndex('dataDisks'),0),256,parameters('sizeOfCasCacheDisksInGB'))]",
                                "lun": "[copyIndex('dataDisks')]",
                                "name": "[if(equals(copyIndex('dataDisks'),0),'controllerOptDisk',concat('cas-disk-cache',copyIndex('dataDisks')))]",
                                "managedDisk": {
                                    "storageAccountType": "Premium_LRS"
                                },
                                "createOption": "Empty"
                            }
                        }
                    ]
                },
                "osProfile": {
                    "computerName": "controller",
                    "adminUsername": "[variables('PrimaryUserName')]",
                    "linuxConfiguration": {
                        "disablePasswordAuthentication": true,
                        "ssh": {
                            "publicKeys": [
                                {
                                    "path": "[concat('/home/', variables('PrimaryUserName'), '/.ssh/authorized_keys')]",
                                    "keyData": "[parameters('SSHPublicKey')]"
                                }
                            ]
                        }
                    },
                    "customData": "[base64(concat('#include\n', uri(parameters('_artifactsLocation'), concat('cloudinit/controller.txt', parameters('_artifactsLocationSasToken')))))]"
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', 'CASController_NetworkInterface')]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true,
                        "storageUri": "[reference(variables('DiagnosticStorageGroupName')).primaryEndpoints.blob]"
                    }
                }
            },
            "resources": []
        },
		{
      "name": "controller/CASStartup",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "location": "[parameters('location')]",
      "apiVersion": "2019-07-01",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', 'controller')]",
        "[resourceId('Microsoft.Compute/virtualMachines', 'Ansible')]",
        "[resourceId('Microsoft.Resources/deployments', 'AnsiblePhase1SetupHostForAnsible')]"
      ],
      "properties": {
        "publisher": "Microsoft.Azure.Extensions",
        "type": "CustomScript",
        "typeHandlerVersion": "2.0",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "skipDos2Unix": false
        },
        "protectedSettings": {
          "commandToExecute": "[ concat('set -o pipefail; ./nonansiblecontroller_prereqs.sh \"', variables('PrimaryUserName'), '\" \"', variables('DiagnosticStorageGroupName'), '\" \"', variables('AzureFilesViyaShare'), '\" \"', listKeys(variables('DiagnosticStorageGroupName'),'2019-06-01').keys[0].value,'\" \"CasControllerServers\" 2>&1 | tee /tmp/prerequisites.log')]",
          "fileUris": [
            "[concat(parameters('_artifactsLocation'), 'scripts/nonansiblecontroller_prereqs.sh', parameters('_artifactsLocationSasToken'))]"
          ]
        }
      }
    },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "apiVersion": "2019-09-01",
            "name": "[concat(concat('worker', padLeft(copyIndex(1), 2, '0')), '_NetworkInterface')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', 'Viya_NetworkSecurityGroup')]",
                "[resourceId('Microsoft.Network/applicationSecurityGroups', 'github-accessor')]",
                "[resourceId('Microsoft.Network/applicationSecurityGroups', 'sas-services-accessor')]",
                "[resourceId('Microsoft.Network/applicationSecurityGroups', 'sas-viya-provider')]",
                "[resourceId('Microsoft.Resources/deployments', 'CreateNetwork')]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "subnet": {
                                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('VirtualNetworkName'), variables('VirtualNetworkPrivateSubnet'))]"
                            },
                            "privateIPAddressVersion": "IPv4",
                            "applicationSecurityGroups": [
                                {
                                    "id": "[resourceId('Microsoft.Network/applicationSecurityGroups', 'github-accessor')]"
                                },
                                {
                                    "id": "[resourceId('Microsoft.Network/applicationSecurityGroups', 'sas-services-accessor')]"
                                },
                                {
                                    "id": "[resourceId('Microsoft.Network/applicationSecurityGroups', 'sas-viya-provider')]"
                                }
                            ]
                        }
                    }
                ],
                "enableAcceleratedNetworking": false,
                "enableIPForwarding": false,
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', 'Viya_NetworkSecurityGroup')]"
                }
            },
            "copy": {
                "name": "casworkercopy",
                "count": "[if(equals(parameters('CAS Node Count'), 1), 0, parameters('CAS Node Count'))]"
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "apiVersion": "2019-07-01",
            "name": "[concat('worker', padLeft(copyIndex(1), 2, '0'))]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', concat(concat('worker', padLeft(copyIndex(1), 2, '0')), '_NetworkInterface'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('DiagnosticStorageGroupName'))]"
            ],
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[parameters('CAS Worker VM SKU')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "RedHat",
                        "offer": "RHEL",
                        "sku": "7.7",
                        "version": "latest"
                    },
                    "osDisk": {
                        "osType": "Linux",
                        "name": "[concat(concat('worker', padLeft(copyIndex(1), 2, '0')),'_OsDisk_1')]",
                        "createOption": "FromImage",
                        "caching": "ReadWrite",
                        "managedDisk": {
                            "storageAccountType": "Premium_LRS"
                        },
                        "diskSizeGB": 64
                    },
                    "copy": [
                        {
                            "name": "dataDisks",
                            "count": "[add(parameters('numCasCacheDisks'),1)]",
                            "input": {
                                "caching": "none",
                                "diskSizeGB": "[if(equals(copyIndex('dataDisks'),0),256,parameters('sizeOfCasCacheDisksInGB'))]",
                                "lun": "[copyIndex('dataDisks')]",
                                "name": "[if(equals(copyIndex('dataDisks'),0),concat(concat('worker', padLeft(copyIndex(1), 2, '0')),'OptDisk'),concat('worker', padLeft(copyIndex(1), 2, '0'),'-cas-disk-cache-',copyIndex('dataDisks')))]",
                                "managedDisk": {
                                    "storageAccountType": "Premium_LRS"
                                },
                                "createOption": "Empty"
                            }
                        }
                    ]
                },
                "osProfile": {
                    "computerName": "[concat('worker', padLeft(copyIndex(1), 2, '0'))]",
                    "adminUsername": "[variables('PrimaryUserName')]",
                    "linuxConfiguration": {
                        "disablePasswordAuthentication": true,
                        "ssh": {
                            "publicKeys": [
                                {
                                    "path": "[concat('/home/', variables('PrimaryUserName'), '/.ssh/authorized_keys')]",
                                    "keyData": "[parameters('SSHPublicKey')]"
                                }
                            ]
                        }
                    },
                    "customData": "[base64(concat('#include\n', uri(parameters('_artifactsLocation'), concat('cloudinit/controller.txt', parameters('_artifactsLocationSasToken')))))]"
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(concat('worker', padLeft(copyIndex(1), 2, '0')), '_NetworkInterface'))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true,
                        "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('DiagnosticStorageGroupName'))).primaryEndpoints.blob]"
                    }
                }
            },
            "resources": [],
            "copy": {
                "name": "casworkercopy",
                "count": "[if(equals(parameters('CAS Node Count'), 1), 0, parameters('CAS Node Count'))]"
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "apiVersion": "2019-07-01",
            "name": "[concat(concat('worker', padLeft(copyIndex(1), 2, '0')), '/CASStartup')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', concat('worker', padLeft(copyIndex(1), 2, '0')))]",
                "[resourceId('Microsoft.Compute/virtualMachines', 'Ansible')]",
                "[resourceId('Microsoft.Resources/deployments', 'AnsiblePhase1SetupHostForAnsible')]"
            ],
            "properties": {
                "publisher": "Microsoft.Azure.Extensions",
                "type": "CustomScript",
                "typeHandlerVersion": "2.0",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "skipDos2Unix": false
                },
                "protectedSettings": {
                    "commandToExecute": "[ concat('set -o pipefail; ./nonansiblecontroller_prereqs.sh \"', variables('PrimaryUserName'), '\" \"', variables('DiagnosticStorageGroupName'), '\" \"', variables('AzureFilesViyaShare'), '\" \"', listKeys(variables('DiagnosticStorageGroupName'),'2019-06-01').keys[0].value,'\" \"CasControllerServers\" 2>&1 | tee /tmp/prerequisites.log')]",
                    "fileUris": [
                        "[concat(parameters('_artifactsLocation'), 'scripts/nonansiblecontroller_prereqs.sh', parameters('_artifactsLocationSasToken'))]"
                    ]
                }
            },
            "copy": {
                "name": "casworkercopy",
                "count": "[if(equals(parameters('CAS Node Count'), 1), 0, parameters('CAS Node Count'))]"
            }
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2019-09-01",
            "name": "Viya_NetworkSecurityGroup",
            "location": "[parameters('location')]",
            "properties": {
                "defaultSecurityRules": [
                    {
                        "name": "AllowVnetInBound",
                        "properties": {
                            "description": "Allow inbound traffic from all VMs in VNET",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "VirtualNetwork",
                            "destinationAddressPrefix": "VirtualNetwork",
                            "access": "Allow",
                            "priority": 65000,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "AllowAzureLoadBalancerInBound",
                        "properties": {
                            "description": "Allow inbound traffic from the Microsoft Azure load balancer",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "AzureLoadBalancer",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 65001,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "DenyAllInBound",
                        "properties": {
                            "description": "Deny all inbound traffic",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Deny",
                            "priority": 65500,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "AllowVnetOutBound",
                        "properties": {
                            "description": "Allow outbound traffic from all VMs to all VMs in VNET",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "VirtualNetwork",
                            "destinationAddressPrefix": "VirtualNetwork",
                            "access": "Allow",
                            "priority": 65000,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "AllowInternetOutBound",
                        "properties": {
                            "description": "Allow outbound traffic from all VMs to the Internet",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "Internet",
                            "access": "Allow",
                            "priority": 65001,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "DenyAllOutBound",
                        "properties": {
                            "description": "Deny all outbound traffic",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Deny",
                            "priority": 65500,
                            "direction": "Outbound"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "apiVersion": "2019-09-01",
            "name": "Services_NetworkInterface",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', 'Viya_NetworkSecurityGroup')]",
                "[resourceId('Microsoft.Network/applicationSecurityGroups', 'github-accessor')]",
                "[resourceId('Microsoft.Network/applicationSecurityGroups', 'sas-services-provider')]",
                "[resourceId('Microsoft.Network/applicationSecurityGroups', 'sas-viya-accessor')]",
                "[resourceId('Microsoft.Resources/deployments', 'CreateNetwork')]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "subnet": {
                                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('VirtualNetworkName'), variables('VirtualNetworkPrivateSubnet'))]"
                            },
                            "privateIPAddressVersion": "IPv4",
                            "applicationSecurityGroups": [
                                {
                                    "id": "[resourceId('Microsoft.Network/applicationSecurityGroups', 'github-accessor')]"
                                },
                                {
                                    "id": "[resourceId('Microsoft.Network/applicationSecurityGroups', 'sas-services-provider')]"
                                },
                                {
                                    "id": "[resourceId('Microsoft.Network/applicationSecurityGroups', 'sas-viya-accessor')]"
                                }
                            ]
                        }
                    }
                ],
                "enableAcceleratedNetworking": false,
                "enableIPForwarding": false,
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', 'Viya_NetworkSecurityGroup')]"
                }
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "apiVersion": "2019-07-01",
            "name": "services",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', 'Services_NetworkInterface')]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('DiagnosticStorageGroupName'))]"
            ],
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[parameters('Services VM SKU')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "RedHat",
                        "offer": "RHEL",
                        "sku": "7.7",
                        "version": "latest"
                    },
                    "osDisk": {
                        "osType": "Linux",
                        "name": "services_OsDisk_1",
                        "createOption": "FromImage",
                        "caching": "ReadWrite",
                        "managedDisk": {
                            "storageAccountType": "Premium_LRS"
                        },
                        "diskSizeGB": 64
                    },
                    "dataDisks": [
                        {
                            "lun": 0,
                            "name": "servicesOptDisk",
                            "createOption": "Empty",
                            "managedDisk": {
                                "storageAccountType": "Premium_LRS"
                            },
                            "diskSizeGB": 256
                        }
                    ]
                },
                "osProfile": {
                    "computerName": "services",
                    "adminUsername": "[variables('PrimaryUserName')]",
                    "linuxConfiguration": {
                        "disablePasswordAuthentication": true,
                        "ssh": {
                            "publicKeys": [
                                {
                                    "path": "[concat('/home/', variables('PrimaryUserName'), '/.ssh/authorized_keys')]",
                                    "keyData": "[parameters('SSHPublicKey')]"
                                }
                            ]
                        }
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', 'Services_NetworkInterface')]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true,
                        "storageUri": "[reference(variables('DiagnosticStorageGroupName')).primaryEndpoints.blob]"
                    }
                }
            },
            "resources": []
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "apiVersion": "2019-07-01",
            "name": "services/ServicesStartup",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', 'services')]",
                "[resourceId('Microsoft.Compute/virtualMachines', 'Ansible')]",
                "[resourceId('Microsoft.Resources/deployments', 'AnsiblePhase1SetupHostForAnsible')]"
            ],
            "properties": {
                "publisher": "Microsoft.Azure.Extensions",
                "type": "CustomScript",
                "typeHandlerVersion": "2.0",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "skipDos2Unix": false
                },
                "protectedSettings": {
                    "commandToExecute": "[ concat('set -o pipefail; ./nonansiblecontroller_prereqs.sh \"', variables('PrimaryUserName'), '\" \"', variables('DiagnosticStorageGroupName'), '\" \"', variables('AzureFilesViyaShare'), '\" \"', listKeys(variables('DiagnosticStorageGroupName'),'2019-06-01').keys[0].value, '\" \"VisualServicesServers,ProgrammingServicesServers,StatefulServicesServers\" 2>&1 | tee /tmp/prerequisites.log')]",
                    "fileUris": [
                        "[concat(parameters('_artifactsLocation'), 'scripts/nonansiblecontroller_prereqs.sh', parameters('_artifactsLocationSasToken'))]"
                    ]
                }
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "apiVersion": "2019-09-01",
            "name": "spre_NetworkInterface",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', 'Viya_NetworkSecurityGroup')]",
                "[resourceId('Microsoft.Network/applicationSecurityGroups', 'github-accessor')]",
                "[resourceId('Microsoft.Network/applicationSecurityGroups', 'sas-services-provider')]",
                "[resourceId('Microsoft.Network/applicationSecurityGroups', 'sas-viya-accessor')]",
                "[resourceId('Microsoft.Resources/deployments', 'CreateNetwork')]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "subnet": {
                                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('VirtualNetworkName'), variables('VirtualNetworkPrivateSubnet'))]"
                            },
                            "privateIPAddressVersion": "IPv4",
                            "applicationSecurityGroups": [
                                {
                                    "id": "[resourceId('Microsoft.Network/applicationSecurityGroups', 'github-accessor')]"
                                },
                                {
                                    "id": "[resourceId('Microsoft.Network/applicationSecurityGroups', 'sas-services-provider')]"
                                },
                                {
                                    "id": "[resourceId('Microsoft.Network/applicationSecurityGroups', 'sas-viya-accessor')]"
                                }
                            ]
                        }
                    }
                ],
                "enableAcceleratedNetworking": false,
                "enableIPForwarding": false,
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', 'Viya_NetworkSecurityGroup')]"
                }
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "apiVersion": "2019-07-01",
            "name": "spre",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', 'spre_NetworkInterface')]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('DiagnosticStorageGroupName'))]"
            ],
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[parameters('spre VM SKU')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "RedHat",
                        "offer": "RHEL",
                        "sku": "7.7",
                        "version": "latest"
                    },
                    "osDisk": {
                        "osType": "Linux",
                        "name": "spre_OsDisk_1",
                        "createOption": "FromImage",
                        "caching": "ReadWrite",
                        "managedDisk": {
                            "storageAccountType": "Premium_LRS"
                        },
                        "diskSizeGB": 64
                    },
                    "copy": [
                        {
                            "name": "dataDisks",
                            "count": "[add(parameters('numSasWorkDisks'),1)]",
                            "input": {
                                "caching": "none",
                                "diskSizeGB": "[if(equals(copyIndex('dataDisks'),0),256,parameters('sizeOfSasWorkDisksInGB'))]",
                                "lun": "[copyIndex('dataDisks')]",
                                "name": "[if(equals(copyIndex('dataDisks'),0),'spreOptDisk',concat('SASWork-disk-',copyIndex('dataDisks')))]",
                                "managedDisk": {
                                    "storageAccountType": "Premium_LRS"
                                },
                                "createOption": "Empty"
                            }
                        }
                    ]
                },
                "osProfile": {
                    "computerName": "spre",
                    "adminUsername": "[variables('PrimaryUserName')]",
                    "linuxConfiguration": {
                        "disablePasswordAuthentication": true,
                        "ssh": {
                            "publicKeys": [
                                {
                                    "path": "[concat('/home/', variables('PrimaryUserName'), '/.ssh/authorized_keys')]",
                                    "keyData": "[parameters('SSHPublicKey')]"
                                }
                            ]
                        }
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', 'spre_NetworkInterface')]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true,
                        "storageUri": "[reference(variables('DiagnosticStorageGroupName')).primaryEndpoints.blob]"
                    }
                }
            },
            "resources": []
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "apiVersion": "2019-07-01",
            "name": "spre/spreStartup",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', 'spre')]",
                "[resourceId('Microsoft.Compute/virtualMachines', 'Ansible')]",
                "[resourceId('Microsoft.Resources/deployments', 'AnsiblePhase1SetupHostForAnsible')]"
            ],
            "properties": {
                "publisher": "Microsoft.Azure.Extensions",
                "type": "CustomScript",
                "typeHandlerVersion": "2.0",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "skipDos2Unix": false
                },
                "protectedSettings": {
                    "commandToExecute": "[ concat('set -o pipefail; ./nonansiblecontroller_prereqs.sh \"', variables('PrimaryUserName'), '\" \"', variables('DiagnosticStorageGroupName'), '\" \"', variables('AzureFilesViyaShare'), '\" \"', listKeys(variables('DiagnosticStorageGroupName'),'2019-06-01').keys[0].value, '\" \"VisualServicesServers,ProgrammingServicesServers,StatefulServicesServers\" 2>&1 | tee /tmp/prerequisites.log')]",
                    "fileUris": [
                        "[concat(parameters('_artifactsLocation'), 'scripts/nonansiblecontroller_prereqs.sh', parameters('_artifactsLocationSasToken'))]"
                    ]
                }
            }
        },
        {
            "type": "Microsoft.Network/applicationSecurityGroups",
            "apiVersion": "2019-09-01",
            "name": "github-accessor",
            "location": "[parameters('location')]",
            "properties": {}
        },
        {
            "type": "Microsoft.Network/applicationSecurityGroups",
            "apiVersion": "2019-09-01",
            "name": "sas-services-accessor",
            "location": "[parameters('location')]",
            "properties": {}
        },
        {
            "type": "Microsoft.Network/applicationSecurityGroups",
            "apiVersion": "2019-09-01",
            "name": "sas-services-provider",
            "location": "[parameters('location')]",
            "properties": {}
        },
        {
            "type": "Microsoft.Network/applicationSecurityGroups",
            "apiVersion": "2019-09-01",
            "name": "sas-viya-accessor",
            "location": "[parameters('location')]",
            "properties": {}
        },
        {
            "type": "Microsoft.Network/applicationSecurityGroups",
            "apiVersion": "2019-09-01",
            "name": "sas-viya-provider",
            "location": "[parameters('location')]",
            "properties": {}
        }
    ],
    "outputs": {
        "AnsibleControllerIP": {
            "type": "String",
            "value": "[reference('AnsibleController_PublicIP').ipAddress]"
        },
        "SASDrive": {
            "type": "String",
            "value": "[if(empty(parameters('DeploymentDataLocation')), 'A testing license string was provided instead of a valid license URI. Therefore, SAS was not actually installed. Please replace DeploymentDataLocation with a valid license URI. For further details, see the Troubleshooting section in the Readme.', concat('https://', reference('PrimaryViyaLoadbalancer_PublicIP').dnsSettings.fqdn, json(split(reference('AnsiblePhase8GetCASURIsFromLicense').outputs.instanceView.value.statuses[0].message, '#DATA#')[1]).SAS_DRIVE))]"
        },
        "SASStudio": {
            "type": "String",
            "value": "[if(empty(parameters('DeploymentDataLocation')), 'A testing license string was provided instead of a valid license URI. Therefore, SAS was not actually installed. Please replace DeploymentDataLocation with a valid license URI. For further details, see the Troubleshooting section in the Readme.', concat('https://', reference('PrimaryViyaLoadbalancer_PublicIP').dnsSettings.fqdn, json(split(reference('AnsiblePhase8GetCASURIsFromLicense').outputs.instanceView.value.statuses[0].message, '#DATA#')[1]).SAS_STUDIO))]"
        }
    }
}